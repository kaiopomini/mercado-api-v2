// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  email          String    @unique
  name           String
  validatedEmail Boolean   @default(false)
  hash           String
  hashedRT       String?
  profile        Profile?
  roles          Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@map("users")
}

model Profile {
  id      String   @id @default(uuid()) @db.Uuid
  more    String?
  avatar  String?
  address Address?
  phones  Phone[]
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @unique @db.Uuid

  @@map("profiles")
}

model Address {
  id              String  @id @default(uuid()) @db.Uuid
  alias           String
  name            String
  number          String?
  zipCode         String
  city            String
  federativeUnity String
  country         String  @default("Brasil")
  profile         Profile @relation(fields: [profileId], references: [id])
  profileId       String  @unique @db.Uuid

  @@map("addresses")
}

model Phone {
  id          String  @id @default(uuid()) @db.Uuid
  countryCode String  @default("+55")
  phoneNumber String
  isPrimary   Boolean @default(false)
  isWhatsapp  Boolean @default(false)
  profile     Profile @relation(fields: [profileId], references: [id])
  profileId   String  @unique @db.Uuid

  @@map("phones")
}

model ProductCategory {
  id          String                 @id @default(uuid()) @db.Uuid
  name        String
  description String?
  image       String
  active      Boolean
  posts       CategoriesOnProducts[]

  @@map("categories")
}

model Product {
  id                  String                 @id @default(uuid()) @db.Uuid
  name                String
  price               Float                  @db.Real
  basePrice           Float                  @db.Real
  quantity            Float
  quantityType        QuantityType           @default(UN)
  controlledInventory Boolean
  image               String?
  active              Boolean
  barcode             String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  deletedAt           DateTime?
  categories          CategoriesOnProducts[]

  @@index(fields: [barcode])
  @@map("products")
}

model CategoriesOnProducts {
  product    Product         @relation(fields: [productId], references: [id])
  productId  String          @unique @db.Uuid
  category   ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId String          @unique @db.Uuid
  assignedAt DateTime        @default(now())
  assignedBy String

  @@id([productId, categoryId])
  @@map("categoriesOnProducts")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum QuantityType {
  KG
  UN
}
